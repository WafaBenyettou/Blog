package com.blog.dao;

import com.blog.entities.User;
import at.favre.lib.crypto.bcrypt.BCrypt;
import java.sql.*;

public class UserDao {

    private Connection con;

    public UserDao(Connection con) {
        this.con = con;
    }

    // Method to insert user into the database
    public boolean saveUser(User user) throws SQLException {
        boolean f = false;
        try {
            // Validate user input
            if (user.getName() == null || user.getName().isEmpty()) {
                throw new IllegalArgumentException("Name is required.");
            }
            if (user.getEmail() == null || user.getEmail().isEmpty()) {
                throw new IllegalArgumentException("Email is required.");
            }
            if (user.getPassword() == null || user.getPassword().isEmpty()) {
                throw new IllegalArgumentException("Password is required.");
            }
            if (user.getGender() == null || user.getGender().isEmpty()) {
                throw new IllegalArgumentException("Gender is required.");
            }
            if (user.getAbout() == null || user.getAbout().isEmpty()) {
                throw new IllegalArgumentException("About is required.");
            }

            // Hash the password
            String hashedPassword = BCrypt.withDefaults().hashToString(12, user.getPassword().toCharArray());

            String query = "insert into users(name,email,password,gender,about) values (?,?,?,?,?)";
            PreparedStatement pstmt = this.con.prepareStatement(query);

            pstmt.setString(1, user.getName());
            pstmt.setString(2, user.getEmail());
            pstmt.setString(3, hashedPassword);
            pstmt.setString(4, user.getGender());
            pstmt.setString(5, user.getAbout());

            pstmt.executeUpdate();
            f = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return f;
    }

    // Get user by email and password
    public User getUserByEmailAndPassword(String email, String password) throws SQLException {
        User user = null;

        try {
            // Validate input parameters
            if (email == null || email.isEmpty()) {
                throw new IllegalArgumentException("Email is required.");
            }
            if (password == null || password.isEmpty()) {
                throw new IllegalArgumentException("Password is required.");
            }

            String query = "select * from users where email =?";
            PreparedStatement pstmt = con.prepareStatement(query);
            pstmt.setString(1, email);

            ResultSet set = pstmt.executeQuery();

            if (set.next()) {
                // Verify the password
                String hashedPassword = set.getString("password");
                boolean passwordMatch = BCrypt.verifyer().verify(password.toCharArray(), hashedPassword).verified;

                if (passwordMatch) {
                    user = new User();

                    // Data from the database
                    String name = set.getString("name");
                    // Set to user object
                    user.setName(name);

                    user.setId(set.getInt("id"));
                    user.setEmail(set.getString("email"));
                    user.setPassword(hashedPassword);
                    user.setGender(set.getString("gender"));
                    user.setAbout(set.getString("about"));
                    user.setDateTime(set.getTimestamp("rdate"));
                    user.setProfile(set.getString("profile"));
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return user;
    }

    // Update user
    public boolean updateUser(User user) throws SQLException {
        boolean f = false;
        try {
            // Validate user input
            if (user.getName() == null || user.getName().isEmpty()) {
                throw new IllegalArgumentException("Name is required.");
            }
            if (user.getEmail() == null || user.getEmail().isEmpty()) {
                throw new IllegalArgumentException("Email is required.");
            }
            if (user.getPassword() == null || user.getPassword().isEmpty()) {
                throw new IllegalArgumentException("Password is required.");
            }
            if (user.getGender() == null || user.getGender().isEmpty()) {
                throw new IllegalArgumentException("Gender is required.");
            }
            if (user.getAbout() == null || user.getAbout().isEmpty()) {
                throw new IllegalArgumentException("About is required.");
            }

            String query = "update users set name=? , email=? , password=? , gender=? ,about=? , profile=? where  id =?";
            PreparedStatement p = con.prepareStatement(query);
            p.setString(1, user.getName());
            p.setString(2, user.getEmail());
            p.setString(3, user.getPassword());
            p.setString(4, user.getGender());
            p.setString(5, user.getAbout());
            p.setString(6, user.getProfile());
            p.setInt(7, user.getId());

            p.executeUpdate();
            f = true;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return f;
    }

    // Get user by userId
    public User getUserByUserId(int userId) throws SQLException {
        User user = null;
        try {
            String q = "select * from users where id=?";
            PreparedStatement ps = this.con.prepareStatement(q);
            ps.setInt(1, userId);
            ResultSet set = ps.executeQuery();
            if (set.next()) {
                user = new User();

                // Data from the database
                String name = set.getString("name");
                // Set to user object
                user.setName(name);

                user.setId(set.getInt("id"));
                user.setEmail(set.getString("email"));
                user.setPassword(set.getString("password"));
                user.setGender(set.getString("gender"));
                user.setAbout(set.getString("about"));
                user.setDateTime(set.getTimestamp("rdate"));
                user.setProfile(set.getString("profile"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return user;
    }
}
